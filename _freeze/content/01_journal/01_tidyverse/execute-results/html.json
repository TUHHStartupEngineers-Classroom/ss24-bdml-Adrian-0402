{
  "hash": "e6c9410c011b3d037093194c1fbba0a1",
  "result": {
    "markdown": "---\ntitle: \"Supervised Machine Learning\"\nauthor: \"Adrian Florea\"\n---\n\n\n# Challenge 2 - Supervised ML\n\n\n::: {.cell hash='01_tidyverse_cache/html/unnamed-chunk-1_ccad5d1d5b52b4c0ac362cbf8edb2465'}\n\n```{.r .cell-code}\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\nlibrary(workflows)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# 1.0 Build a model (GLM) and load Data ----\n\nmodel_glm <- linear_reg() %>% \n  set_engine(\"glm\")\n\nbike_features_tbl <- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/raw_data/bike_features_tbl.rds\")\n\nbike_features_tbl <- bike_features_tbl %>% \n  \n  select(model:url, `Rear Derailleur`, `Shift Lever`) %>% \n  mutate(id = row_number()) %>% \n  select(id, everything(), -url)\n\n# Split the data first\n\nset.seed(seed = 1112)\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\n\n# Check if testing contains all category_2 values\nsplit_obj %>% training() %>% distinct(category_2)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"category_2\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Race\"},{\"1\":\"Endurance\"},{\"1\":\"E-Road\"},{\"1\":\"Cyclocross\"},{\"1\":\"Triathlon Bike\"},{\"1\":\"Fat Bikes\"},{\"1\":\"Cross-Country\"},{\"1\":\"All-Road\"},{\"1\":\"E-Gravel\"},{\"1\":\"E-Mountain\"},{\"1\":\"Downhill\"},{\"1\":\"Dirt Jump\"},{\"1\":\"Enduro\"},{\"1\":\"E-City\"},{\"1\":\"E-Trekking\"},{\"1\":\"E-Fitness\"},{\"1\":\"City\"},{\"1\":\"Touring\"},{\"1\":\"Adventure\"},{\"1\":\"Trail\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nsplit_obj %>% testing() %>% distinct(category_2)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"category_2\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Race\"},{\"1\":\"Endurance\"},{\"1\":\"Cyclocross\"},{\"1\":\"Triathlon Bike\"},{\"1\":\"Cross-Country\"},{\"1\":\"Adventure\"},{\"1\":\"All-Road\"},{\"1\":\"Trail\"},{\"1\":\"E-Mountain\"},{\"1\":\"Downhill\"},{\"1\":\"Enduro\"},{\"1\":\"E-City\"},{\"1\":\"E-Trekking\"},{\"1\":\"City\"},{\"1\":\"Touring\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Assign training and test data\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\n# We have to remove spaces and dashes from the column names\ntrain_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n# 2.0 Create features with the recipes package ----\n\nrecipe_obj <- recipe(price ~ ., data = train_tbl) %>%\n  step_rm(c(model:weight),category_1,c(category_3:gender)) %>%\n  update_role(id, new_role = \"ID\") %>% \n  step_dummy(all_nominal(), - all_outcomes(), one_hot = TRUE) %>%\n  step_zv(all_predictors()) %>%\n  # Use median to guess missing values\n  step_impute_median(all_predictors())\n\n# train_transformed_tbl <- bake(recipe_obj, new_data = train_tbl)\n# test_transformed_tbl  <- bake(recipe_obj, new_data = test_tbl)\n\n# 3.0 Bundle model and recipe with the workflow package\n\n# Trying to use prep() or bake() and then bundle it into a workflow\n# gives us the error:\n\n# Error in `add_recipe()`:\n# !Can't add a trained recipe to a workflow.\n\n# One cannot use prep() and bake() if it is to be bundled into a workflow\n# therefore we omit those steps from above and use it \"unprepped\"\n\nbikes_wflow <-\n  workflow() %>% \n  add_model(model_glm) %>% \n  add_recipe(recipe_obj)\n\n# 4.0 Evaluate model with the yardstick package\n\n# Fit the data using workflow\nbikes_fit <- \n  bikes_wflow %>% \n  fit(data = train_tbl)\n\ncalc_metrics <- function(model, new_data = test_tbl) {\n  \n  model %>%\n    predict(new_data = new_data) %>%\n    \n    bind_cols(new_data %>% select(price)) %>%\n    \n    yardstick::metrics(truth = price, estimate = .pred_res)\n  \n}\n\n# Evaluate\nbikes_fit %>% calc_metrics(new_data = test_tbl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: ! There are new levels in a factor: `Shimano Ultegra Di2 RX805 GS`, `SRAM XX1\n#>   Eagle`, `SRAM XX1 Eagle 12s`, `SRAM X01 DH`, `Shimano SLX M7000 GS`, and\n#>   `SRAM Force CX1 SGS`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: ! There are new levels in a factor: `Shimano Di2 Remote Sprinter Shifter`,\n#>   `SRAM XX1 Eagle Trigger 12s`, and `Tektro Matchmaker`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#> prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n```\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"rmse\",\"2\":\"standard\",\"3\":\"813.0782792\"},{\"1\":\"rsq\",\"2\":\"standard\",\"3\":\"0.7639036\"},{\"1\":\"mae\",\"2\":\"standard\",\"3\":\"555.1790854\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n# Some Remarks\n\nUsing all_nominal() creates a lot more columns for every specific type\nas opposed to the advanced string manipulation done for rear derailleurs and \nshift levers in the business case (which grouped similar names). Therefore, unknown values can appear\nduring predictions, because they only appeared in the training data, and not in the testing data.\nThus, step_dummy() could not create variables for the unknown testing data set.\n\nAlthough step_impute_median() makes predicting with missing values possible,\nthe result is hardly accurate. This can be seen by large errors for certain data\npoints.\n\n\n::: {.cell hash='01_tidyverse_cache/html/unnamed-chunk-2_89caea1eb0bbb3bd8e2234ccbe27e70a'}\n\n```{.r .cell-code}\nbikes_fit %>% predict(new_data = test_tbl) %>% \n  bind_cols(test_tbl %>% select(price)) %>% view()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: ! There are new levels in a factor: `Shimano Ultegra Di2 RX805 GS`, `SRAM XX1\n#>   Eagle`, `SRAM XX1 Eagle 12s`, `SRAM X01 DH`, `Shimano SLX M7000 GS`, and\n#>   `SRAM Force CX1 SGS`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: ! There are new levels in a factor: `Shimano Di2 Remote Sprinter Shifter`,\n#>   `SRAM XX1 Eagle Trigger 12s`, and `Tektro Matchmaker`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#> prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}