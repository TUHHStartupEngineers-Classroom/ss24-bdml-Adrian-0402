{
  "hash": "ac9726516b5f78904a9414fb73ca69dc",
  "result": {
    "markdown": "---\ntitle: \"Supervised ML - Regression (II)\"\nauthor: \"Adrian Florea\"\n---\n\n\n# Challenge 2 - Prepare data with \"recipe\" package\n\n\n::: {.cell hash='01_supervised_ml_reg2_cache/html/unnamed-chunk-1_01f61e3215ba4ce58a8280ef3af7d43c'}\n\n```{.r .cell-code}\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\nlibrary(workflows)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# 1.0 Build a model (GLM) and load Data ----\n\nmodel_glm <- linear_reg() %>% \n  set_engine(\"glm\")\n\nbike_features_tbl <- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/raw_data/bike_features_tbl.rds\")\n\nbike_features_tbl <- bike_features_tbl %>% \n  \n  select(model:url, `Rear Derailleur`, `Shift Lever`) %>% \n  mutate(id = row_number()) %>% \n  select(id, everything(), -url)\n\n# Split the data first\n\nset.seed(seed = 1112)\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\n\n# Check if testing contains all category_2 values\n# split_obj %>% training() %>% distinct(category_2)\n# split_obj %>% testing() %>% distinct(category_2)\n\n# Assign training and test data\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\n# We have to remove spaces and dashes from the column names\ntrain_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n# 2.0 Create features with the recipes package ----\n\nrecipe_obj <- recipe(price ~ ., data = train_tbl) %>%\n  step_rm(c(model:weight),category_1,c(category_3:gender)) %>%\n  update_role(id, new_role = \"ID\") %>% \n  step_dummy(all_nominal(), - all_outcomes(), one_hot = TRUE) %>%\n  step_zv(all_predictors()) %>%\n  # Use median to guess missing values\n  step_impute_median(all_predictors())\n\n# train_transformed_tbl <- bake(recipe_obj, new_data = train_tbl)\n# test_transformed_tbl  <- bake(recipe_obj, new_data = test_tbl)\n\n# 3.0 Bundle model and recipe with the workflow package\n\n# Trying to use prep() or bake() and then bundle it into a workflow\n# gives us the error:\n\n# Error in `add_recipe()`:\n# !Can't add a trained recipe to a workflow.\n\n# One cannot use prep() and bake() if it is to be bundled into a workflow\n# therefore we omit those steps from above and use it \"unprepped\"\n\nbikes_wflow <-\n  workflow() %>% \n  add_model(model_glm) %>% \n  add_recipe(recipe_obj)\n\n# 4.0 Evaluate model with the yardstick package\n\n# Fit the data using workflow\nbikes_fit <- \n  bikes_wflow %>% \n  fit(data = train_tbl)\n\ncalc_metrics <- function(model, new_data = test_tbl) {\n  \n  model %>%\n    predict(new_data = new_data) %>%\n    \n    bind_cols(new_data %>% select(price)) %>%\n    \n    yardstick::metrics(truth = price, estimate = .pred_res)\n  \n}\n\n# Evaluate\nbikes_fit %>% calc_metrics(new_data = test_tbl)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"rmse\",\"2\":\"standard\",\"3\":\"813.0782792\"},{\"1\":\"rsq\",\"2\":\"standard\",\"3\":\"0.7639036\"},{\"1\":\"mae\",\"2\":\"standard\",\"3\":\"555.1790854\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n# Some Remarks\n\nUsing all_nominal() creates a lot more columns for every specific type\nas opposed to the advanced string manipulation done for rear derailleurs and \nshift levers in the business case (which grouped similar names). Therefore, unknown values can appear\nduring predictions, because they only appeared in the training data, and not in the testing data.\nThus, step_dummy() could not create variables for the unknown testing data set.\n\nAlthough step_impute_median() makes predicting with missing values possible,\nthe result is hardly accurate. This can be seen by large errors for certain data\npoints.\n\n\n::: {.cell hash='01_supervised_ml_reg2_cache/html/unnamed-chunk-2_03509237cdbd4d4a6bb4c4241ee8ed52'}\n\n```{.r .cell-code}\nbikes_fit %>% predict(new_data = test_tbl) %>% \n  bind_cols(test_tbl %>% select(price))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".pred_res\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"price\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"6681.7169\",\"2\":\"5359\"},{\"1\":\"3817.6152\",\"2\":\"3699\"},{\"1\":\"1937.8194\",\"2\":\"1559\"},{\"1\":\"1119.0000\",\"2\":\"1269\"},{\"1\":\"1937.8194\",\"2\":\"1169\"},{\"1\":\"1119.0000\",\"2\":\"969\"},{\"1\":\"2499.6273\",\"2\":\"2629\"},{\"1\":\"1937.8194\",\"2\":\"2049\"},{\"1\":\"1937.8194\",\"2\":\"1459\"},{\"1\":\"3704.0000\",\"2\":\"3219\"},{\"1\":\"4803.3995\",\"2\":\"4389\"},{\"1\":\"2919.0000\",\"2\":\"3309\"},{\"1\":\"2771.8339\",\"2\":\"2529\"},{\"1\":\"6351.7169\",\"2\":\"7409\"},{\"1\":\"6626.3321\",\"2\":\"6039\"},{\"1\":\"4741.2202\",\"2\":\"5359\"},{\"1\":\"3600.6607\",\"2\":\"3219\"},{\"1\":\"5077.4328\",\"2\":\"4579\"},{\"1\":\"1684.0169\",\"2\":\"1659\"},{\"1\":\"4690.5686\",\"2\":\"3599\"},{\"1\":\"2469.0000\",\"2\":\"1749\"},{\"1\":\"2469.0000\",\"2\":\"1749\"},{\"1\":\"1459.0000\",\"2\":\"1459\"},{\"1\":\"3218.1680\",\"2\":\"3119\"},{\"1\":\"779.0000\",\"2\":\"779\"},{\"1\":\"2919.0000\",\"2\":\"2529\"},{\"1\":\"5896.5000\",\"2\":\"4279\"},{\"1\":\"5896.5000\",\"2\":\"4869\"},{\"1\":\"3938.4068\",\"2\":\"3599\"},{\"1\":\"1985.5716\",\"2\":\"3219\"},{\"1\":\"1169.0000\",\"2\":\"1459\"},{\"1\":\"2434.0000\",\"2\":\"2139\"},{\"1\":\"3729.9741\",\"2\":\"3609\"},{\"1\":\"3567.5995\",\"2\":\"3899\"},{\"1\":\"2009.0000\",\"2\":\"5649\"},{\"1\":\"2529.0000\",\"2\":\"2139\"},{\"1\":\"5006.3735\",\"2\":\"4579\"},{\"1\":\"2905.7726\",\"2\":\"2729\"},{\"1\":\"1953.8815\",\"2\":\"2239\"},{\"1\":\"3865.6667\",\"2\":\"3219\"},{\"1\":\"3454.0000\",\"2\":\"2529\"},{\"1\":\"4869.0000\",\"2\":\"4869\"},{\"1\":\"1926.8820\",\"2\":\"1069\"},{\"1\":\"712.2709\",\"2\":\"1069\"},{\"1\":\"964.2769\",\"2\":\"1069\"},{\"1\":\"4023.3995\",\"2\":\"2919\"},{\"1\":\"964.2769\",\"2\":\"1559\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}