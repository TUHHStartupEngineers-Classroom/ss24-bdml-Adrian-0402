[
  {
    "objectID": "scripts/data products/reporting_rmarkdown.html",
    "href": "scripts/data products/reporting_rmarkdown.html",
    "title": "Reporting with RMarkdown",
    "section": "",
    "text": "Is amazing.\n\n\n\n\nHTML Reports & PDF Reports\nHTML Slide Decks & PowerPoint\nInteractive Dashboards\nBooks with bookdown\nWebsites with blogdown\n\n\n\n\n\nRMarkdown Website with Gallery\nKey Reference: RMarkdown - The Definitive Guide\nPDF Printing Setup: tinytex\n\n\n# PDF Knitting Setup: https://yihui.name/tinytex/ \n# install.packages(\"tintex\")\n# tinytex::install_tinytex()"
  },
  {
    "objectID": "scripts/data products/reporting_rmarkdown.html#what-can-rmarkdown-be-used-for",
    "href": "scripts/data products/reporting_rmarkdown.html#what-can-rmarkdown-be-used-for",
    "title": "Reporting with RMarkdown",
    "section": "",
    "text": "HTML Reports & PDF Reports\nHTML Slide Decks & PowerPoint\nInteractive Dashboards\nBooks with bookdown\nWebsites with blogdown"
  },
  {
    "objectID": "scripts/data products/reporting_rmarkdown.html#key-resources",
    "href": "scripts/data products/reporting_rmarkdown.html#key-resources",
    "title": "Reporting with RMarkdown",
    "section": "",
    "text": "RMarkdown Website with Gallery\nKey Reference: RMarkdown - The Definitive Guide\nPDF Printing Setup: tinytex\n\n\n# PDF Knitting Setup: https://yihui.name/tinytex/ \n# install.packages(\"tintex\")\n# tinytex::install_tinytex()"
  },
  {
    "objectID": "scripts/data products/reporting_rmarkdown.html#header-2",
    "href": "scripts/data products/reporting_rmarkdown.html#header-2",
    "title": "Reporting with RMarkdown",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3"
  },
  {
    "objectID": "scripts/data products/reporting_rmarkdown.html#tab-1",
    "href": "scripts/data products/reporting_rmarkdown.html#tab-1",
    "title": "Reporting with RMarkdown",
    "section": "Tab 1",
    "text": "Tab 1\nThis is Tab 1"
  },
  {
    "objectID": "scripts/data products/reporting_rmarkdown.html#tab-2",
    "href": "scripts/data products/reporting_rmarkdown.html#tab-2",
    "title": "Reporting with RMarkdown",
    "section": "Tab 2",
    "text": "Tab 2\nThis is Tab 2"
  },
  {
    "objectID": "scripts/data products/reporting_rmarkdown.html#footnotes",
    "href": "scripts/data products/reporting_rmarkdown.html#footnotes",
    "title": "Reporting with RMarkdown",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCitation for Footnote 1↩︎\nCitatin for Footnote 2↩︎"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/05_blackbox_lime.html",
    "href": "content/01_journal/05_blackbox_lime.html",
    "title": "05 Explaining Black-Box Models With LIME",
    "section": "",
    "text": "This time we can use h2o directly, however don’t mind the printed output that it produces. Putting h2o.init() in a separate chunk to suppress messages won’t work. The original explanation plot is also shown for comparison.\n\n\n# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries \n\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(rsample)\nlibrary(glue)\n\n# Processing Pipeline\nprocess_hr_data_readable &lt;- function(data, definitions_tbl) {\n  \n  definitions_list &lt;- definitions_tbl %&gt;%\n    fill(...1, .direction = \"down\") %&gt;%\n    filter(!is.na(...2)) %&gt;%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %&gt;%\n    rename(column_name = ...1) %&gt;%\n    mutate(key = as.numeric(key)) %&gt;%\n    mutate(value = value %&gt;% str_replace(pattern = \"'\", replacement = \"\")) %&gt;%\n    split(.$column_name) %&gt;%\n    map(~ select(., -column_name)) %&gt;%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name &lt;- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) &lt;- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl &lt;- list(HR_Data = data) %&gt;%\n    append(definitions_list, after = 1) %&gt;%\n    reduce(left_join) %&gt;%\n    select(-one_of(names(definitions_list))) %&gt;%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %&gt;%\n    select(sort(names(.))) %&gt;%\n    mutate_if(is.character, as.factor) %&gt;%\n    mutate(\n      BusinessTravel = BusinessTravel %&gt;% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %&gt;% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndefinitions_raw_tbl    &lt;- read_excel(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 2. Models ----\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         2 hours 29 minutes \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    5 months and 29 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Adrian_ztm310 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.79 GB \n#&gt;     H2O cluster total cores:    12 \n#&gt;     H2O cluster allowed cores:  12 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n\nautoml_leader &lt;- h2o.loadModel(\"source_data/automated/models/StackedEnsemble_BestOfFamily_5_AutoML_1_20240616_131553\")\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n\npredictions_tbl &lt;- automl_leader %&gt;% \n  h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n  as.tibble() %&gt;%\n  bind_cols(\n    test_tbl %&gt;%\n      select(Attrition, EmployeeNumber)\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# 3.2 Single Explanation ----\n\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1:20) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 0.5\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %&gt;% \n  as.tibble()\n\n\n\n  \n\n\ncase_1 &lt;- explanation %&gt;%\n  filter(case == 1)\n\n# Recreate plot_features()\ng &lt;- plot_features(explanation = case_1, ncol = 1)\n\n# Create text for label\ncase_1 &lt;- case_1 %&gt;% \n  mutate(subtitle_text = glue(\"Case: {case}\\nLabel: {label}\\nProbability: {round(label_prob, 2)}\\nExplanation Fit: {round(model_r2, 2)}\")) \n\n# Recreated plot\ncase_1 %&gt;% \n  arrange(abs(feature_weight)) %&gt;%\n  mutate(feature_desc = as_factor(feature_desc)) %&gt;%\n  mutate(sign = ifelse(feature_weight &gt;= 0, \"Supports\", \"Contradicts\")) %&gt;%\n  \n  ggplot(aes(feature_weight, feature_desc)) +\n  geom_col(aes(fill = sign)) +\n  scale_fill_manual(values = c(\"#c40d00\", \"#000875\")) +\n  \n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank()\n  ) +\n  \n  labs(\n    x = \"Weight\",\n    y = \"Feature\",\n    subtitle = case_1$subtitle_text\n  )\n\n\n\n\n\n\n# Original plot\ng\n\n\n\n\n\n\n\n\n\n# 3.3 Multiple Explanations ----\n\n# Recreated plot\nexplanation %&gt;% \n  mutate(case = as_factor(case)) %&gt;% \n  mutate(feature_desc = factor(feature_desc, levels = feature_desc[order(feature, feature_value)] %&gt;% unique() %&gt;% rev())) %&gt;% \n  \n  ggplot(aes(case, feature_desc, fill = feature_weight)) +\n  geom_tile() +\n  facet_wrap(~label) +\n  \n  scale_x_discrete(\"Case\", expand = c(0, 0)) +\n  scale_y_discrete(\"Feature\", expand = c(0, 0)) +\n  scale_fill_gradient2(low = \"#d43547\", mid = \"#ffffff\", high = \"#525cd1\") +\n  \n  theme_minimal() +\n  theme(panel.border = element_rect(fill = NA, colour = 'grey20', size = 1),\n        panel.grid = element_blank(),\n        legend.position = \"right\",\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)\n        ) +\n  \n  labs(\n    x = \"Case\",\n    y = \"Feature\",\n    fill = \"Feature\\nweight\"\n  )\n\n\n\n\n\n\n# Original plot\nplot_explanations(explanation)"
  },
  {
    "objectID": "content/01_journal/05_blackbox_lime.html#part-1-recreate-plot_features",
    "href": "content/01_journal/05_blackbox_lime.html#part-1-recreate-plot_features",
    "title": "05 Explaining Black-Box Models With LIME",
    "section": "",
    "text": "# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries \n\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(rsample)\nlibrary(glue)\n\n# Processing Pipeline\nprocess_hr_data_readable &lt;- function(data, definitions_tbl) {\n  \n  definitions_list &lt;- definitions_tbl %&gt;%\n    fill(...1, .direction = \"down\") %&gt;%\n    filter(!is.na(...2)) %&gt;%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %&gt;%\n    rename(column_name = ...1) %&gt;%\n    mutate(key = as.numeric(key)) %&gt;%\n    mutate(value = value %&gt;% str_replace(pattern = \"'\", replacement = \"\")) %&gt;%\n    split(.$column_name) %&gt;%\n    map(~ select(., -column_name)) %&gt;%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name &lt;- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) &lt;- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl &lt;- list(HR_Data = data) %&gt;%\n    append(definitions_list, after = 1) %&gt;%\n    reduce(left_join) %&gt;%\n    select(-one_of(names(definitions_list))) %&gt;%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %&gt;%\n    select(sort(names(.))) %&gt;%\n    mutate_if(is.character, as.factor) %&gt;%\n    mutate(\n      BusinessTravel = BusinessTravel %&gt;% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %&gt;% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndefinitions_raw_tbl    &lt;- read_excel(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 2. Models ----\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         2 hours 29 minutes \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    5 months and 29 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Adrian_ztm310 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.79 GB \n#&gt;     H2O cluster total cores:    12 \n#&gt;     H2O cluster allowed cores:  12 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n\nautoml_leader &lt;- h2o.loadModel(\"source_data/automated/models/StackedEnsemble_BestOfFamily_5_AutoML_1_20240616_131553\")\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n\npredictions_tbl &lt;- automl_leader %&gt;% \n  h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n  as.tibble() %&gt;%\n  bind_cols(\n    test_tbl %&gt;%\n      select(Attrition, EmployeeNumber)\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# 3.2 Single Explanation ----\n\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1:20) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 0.5\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %&gt;% \n  as.tibble()\n\n\n\n  \n\n\ncase_1 &lt;- explanation %&gt;%\n  filter(case == 1)\n\n# Recreate plot_features()\ng &lt;- plot_features(explanation = case_1, ncol = 1)\n\n# Create text for label\ncase_1 &lt;- case_1 %&gt;% \n  mutate(subtitle_text = glue(\"Case: {case}\\nLabel: {label}\\nProbability: {round(label_prob, 2)}\\nExplanation Fit: {round(model_r2, 2)}\")) \n\n# Recreated plot\ncase_1 %&gt;% \n  arrange(abs(feature_weight)) %&gt;%\n  mutate(feature_desc = as_factor(feature_desc)) %&gt;%\n  mutate(sign = ifelse(feature_weight &gt;= 0, \"Supports\", \"Contradicts\")) %&gt;%\n  \n  ggplot(aes(feature_weight, feature_desc)) +\n  geom_col(aes(fill = sign)) +\n  scale_fill_manual(values = c(\"#c40d00\", \"#000875\")) +\n  \n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.title = element_blank()\n  ) +\n  \n  labs(\n    x = \"Weight\",\n    y = \"Feature\",\n    subtitle = case_1$subtitle_text\n  )\n\n\n\n\n\n\n# Original plot\ng"
  },
  {
    "objectID": "content/01_journal/05_blackbox_lime.html#part-2-recreate-plot_explanations",
    "href": "content/01_journal/05_blackbox_lime.html#part-2-recreate-plot_explanations",
    "title": "05 Explaining Black-Box Models With LIME",
    "section": "",
    "text": "# 3.3 Multiple Explanations ----\n\n# Recreated plot\nexplanation %&gt;% \n  mutate(case = as_factor(case)) %&gt;% \n  mutate(feature_desc = factor(feature_desc, levels = feature_desc[order(feature, feature_value)] %&gt;% unique() %&gt;% rev())) %&gt;% \n  \n  ggplot(aes(case, feature_desc, fill = feature_weight)) +\n  geom_tile() +\n  facet_wrap(~label) +\n  \n  scale_x_discrete(\"Case\", expand = c(0, 0)) +\n  scale_y_discrete(\"Feature\", expand = c(0, 0)) +\n  scale_fill_gradient2(low = \"#d43547\", mid = \"#ffffff\", high = \"#525cd1\") +\n  \n  theme_minimal() +\n  theme(panel.border = element_rect(fill = NA, colour = 'grey20', size = 1),\n        panel.grid = element_blank(),\n        legend.position = \"right\",\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)\n        ) +\n  \n  labs(\n    x = \"Case\",\n    y = \"Feature\",\n    fill = \"Feature\\nweight\"\n  )\n\n\n\n\n\n\n# Original plot\nplot_explanations(explanation)"
  },
  {
    "objectID": "content/01_journal/03_automated_ml_2.html",
    "href": "content/01_journal/03_automated_ml_2.html",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "",
    "text": "1 Challenge 4: Using AutoML with the Product Backorders Dataset\nThe journal qmd file has issues with running h2o in its entirety. Therefore the results are imported and shown here. For the full computation steps, refer to the corresponding .R file automated_ml_II_CHALLENGE.R located in folder ...\\CHALLENGES.\n\n# H2O modeling\nlibrary(h2o)\nlibrary(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\n\nh2o.init()\n\n# 1 Load and split data set ----\n\nproduct_backorders_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/product_backorders.csv\")\n\n# Predictors info from given paper\n# – x1: Current inventory level of component;\n# – x2: Registered transit time;\n# – x3: In transit quantity;\n# – x4,5,6: Forecast sales for the next 3, 6 and 9 months;\n# – x7,8,9,10: Sales quantity for the prior 1, 3, 6, 9 months;\n# – x11: Minimum recommended amount in stock;\n# – x12: Parts overdue from source;\n# – x13,14: Source performance in last 6 and 12 months;\n# – x15: Amount of stock orders overdue;\n# – x16−21: General risk flags;\n# – y: Product went on backorder.\n\n# Remove \"sku\", because its unique for every product\nproduct_backorders_readable_tbl &lt;- product_backorders_tbl %&gt;% \n  select(-sku) %&gt;% \n  mutate(across(where(is.character), as.factor))\n\nset.seed(seed = 42)\nsplit_obj                       &lt;- rsample::initial_split(product_backorders_readable_tbl, prop = 0.85)\ntrain_readable_tbl              &lt;- training(split_obj)\ntest_readable_tbl               &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 42)\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n# 2 Set response and predictors ----\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n# 3 Run AutoML ----\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n# 4 View leaderboard ----\n\n# Check results\nautoml_models_h2o@leaderboard\n\n# Save the table for journal (I already ran it once, we don't need to overwrite\n# the files every time we externally call this script during the next challenge)\n# automl_models_h2o@leaderboard %&gt;%\n#  as_tibble() %&gt;% \n#   saveRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/automated_ml_II_files/leaderboard_tbl.rds\")\n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\nleader_model_h2o &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel()\n\n# 5 Predict with leader model ----\n\npredictions_tbl &lt;- h2o.predict(leader_model_h2o, newdata = test_h2o) %&gt;% \n  as_tibble()\n\n# Save the table for journal (I already ran it once, we don't need to overwrite\n# the files every time we externally call this script during the next challenge)\n# predictions_tbl %&gt;%  \n#   saveRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/automated_ml_II_files/predictions_tbl.rds\")\n\n# Prediction results\npredictions_tbl\n\n# 6 Save model ----\n\n# Only to be run once, same model won't be overwritten if it\n# already exists.\n\nleader_model_h2o %&gt;% \n  h2o.saveModel(path = \"CHALLENGES/automated_ml_II_files/\")\n\nThe leaderboard and predictions are imported here for simplicity:\n\nlibrary(tidyverse)\n\nleaderboard_tbl &lt;- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/automated_ml_II_files/leaderboard_tbl.rds\")\n\nleaderboard_tbl\n\n\n\n  \n\n\npredictions_tbl &lt;- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/automated_ml_II_files/predictions_tbl.rds\")\n\npredictions_tbl"
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html",
    "href": "CHALLENGES/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n  select(symbol, date, adjusted) %&gt;% \n  filter(year(date) &gt;= 2018) %&gt;%\n  group_by(symbol) %&gt;% \n  mutate(lag_adjusted = lag(adjusted)) %&gt;% \n  filter(!is.na(lag_adjusted)) %&gt;% \n  mutate(pct_return = (adjusted - lag_adjusted) / lag_adjusted) %&gt;% \n  select(symbol, date, pct_return) %&gt;% \n  ungroup()\n  \n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n  select(-symbol) %&gt;% \n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nkmeans_obj %&gt;% glance()\n\n# A tibble: 1 × 4\n  totss tot.withinss betweenss  iter\n  &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n1  33.6         29.2      4.40     3"
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;% \n  mutate(k_means = map(centers, kmeans_mapper)) %&gt;% \n  mutate(glance = map(k_means,glance))\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %&gt;% \n  unnest(glance) %&gt;% \n  select(centers, tot.withinss) %&gt;% \n  \n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#4848cf\", size = 2) +\n  geom_line(color = \"#4848cf\") +\n  \n  labs(\n    title = \"Scree Plot\",\n    subtitle = \"A bend in the graph hints towards diminishing returns for higher number of clusters\"\n    )\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;% \n  select(-symbol) %&gt;% \n  umap()\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(stock_date_matrix_tbl %&gt;% select(symbol))\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;% \n  ggplot(aes(V1,V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"Umap Projection\")\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;% \n  pull(k_means) %&gt;% \n  pluck(10)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;% \n  augment(stock_date_matrix_tbl) %&gt;% \n  select(symbol, .cluster) %&gt;% \n  left_join(umap_results_tbl, by = \"symbol\") %&gt;% \n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;% \n  ggplot(aes(V1,V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = rainbow(10)) +\n  theme_dark()\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html",
    "href": "content/01_journal/02_automated_ml_1.html",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n# Load Data data definitions\n\npath_data_definitions &lt;- \"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\nemployee_attrition_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n# Step 1: Data Summarization -----\n\n# skim(employee_attrition_tbl)\n# We had a look at this before\n\n# Step 2: Data Visualization ----\n\n# Helper function\ncount_to_pct &lt;- function(data, ..., col = n) {\n  \n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  \n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  \n  return(ret)\n  \n}\n\n# Plot function\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,MonthlyIncome) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWe can see a strong peak for “Yes” at lower monthly incomes. Therefore, those that are leaving have a lower monthly income (c).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,PercentSalaryHike) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe Boxplot shows very similar median values of the salary hike. The density plot shows us a mostly overlapping behavior with minor differences in the distribution. Thus it is not entirely clear to deduce anything based on just the Percent Salary Hike (d).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,StockOptionLevel) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can confidently say that the density for higher stock options (1 and 2) is higher for those that are staying (Attrition: “No”). Therefore, those that are staying have a higher stock option level (b).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,EnvironmentSatisfaction) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOne can see that for higher satisfaction levels, significantly more people are staying. This in turn means, that a higher proportion of those that are leaving have a lower satisfaction level, especially for 1 (=“low”). It is also visible on the boxplot, because for “Yes” attrition, the lower 25% quantile extends to 1. So in summary: A higher proportion of those leaving have a low environment satisfaction level (a).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,WorkLifeBalance) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nLooking at the densities again, we can see that the 2’s and 3’s of people that are staying are significantly higher (b).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,JobInvolvement) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows, that the 3’s and 4’s are much more present for people that are staying (especially visible for 3’s). In turn this means, that hose that are leaving have a lower density of 3’s and 4’s (a).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,OverTime) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can see that for people who are leaving, the relative proportion compared to those not leaving is higher when looking at those working overtime. The absolute numbers for attrition is almost the same for either working overtime or not. But for people who are staying its visibly lower. We look at it from another perspective by computing concrete numbers:\n\nemployee_attrition_tbl %&gt;%\n  count(OverTime, Attrition) %&gt;%\n  count_to_pct(OverTime)\n\n\n\n  \n\n\n\n30% of people who are working overtime are leaving. Only 10% of people who are not working overtime are leaving. Or if you change the perspective one more time:\n\nemployee_attrition_tbl %&gt;%\n  count(Attrition, OverTime) %&gt;%\n  count_to_pct(Attrition)\n\n\n\n  \n\n\n\n54% of people who are leaving are working overtime. Only 23% who are staying are working overtime.\nOverall you can say generally, that the proportion of those leaving that are working overtime are high compared to those that are not leaving (a). (Unless you would say that working overtime shall result in more attrition)\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,TrainingTimesLastYear) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nIn the plot we can see, that for most higher numbers of training times (2, 3, 5 and 6), the density of those staying is significantly higher. In the boxplot we can also see, that the median for leaving is 2, while it is 3 for those who stay. Therefore we can say that people that leave tend to have less annual trainings (b).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,YearsAtCompany) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows a higher concentration of people who are leaving that have less years at the company (around 0 to 3). After that, people tend to stay more. The boxplot again confirms this, as the quantiles from the people leaving contain lower values. Therefore, people that leave tend to have less working years at the company (b).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,YearsSinceLastPromotion) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOnce again the density plot shows, that a slight but a visible amount of people that are leaving have a higher density for fewer years since their last promotion. However, we have seen before that also more people tend to leave that have fewer working years in general, so they were probably never promoted since they just started. There is some sort of correlation, so based on just this plot we cannot make a clear statement (c)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#prepare-data-and-functions",
    "href": "content/01_journal/02_automated_ml_1.html#prepare-data-and-functions",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n# Load Data data definitions\n\npath_data_definitions &lt;- \"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\nemployee_attrition_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n# Step 1: Data Summarization -----\n\n# skim(employee_attrition_tbl)\n# We had a look at this before\n\n# Step 2: Data Visualization ----\n\n# Helper function\ncount_to_pct &lt;- function(data, ..., col = n) {\n  \n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  \n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  \n  return(ret)\n  \n}\n\n# Plot function\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}"
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-1",
    "href": "content/01_journal/02_automated_ml_1.html#question-1",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,MonthlyIncome) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWe can see a strong peak for “Yes” at lower monthly incomes. Therefore, those that are leaving have a lower monthly income (c)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-2",
    "href": "content/01_journal/02_automated_ml_1.html#question-2",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,PercentSalaryHike) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe Boxplot shows very similar median values of the salary hike. The density plot shows us a mostly overlapping behavior with minor differences in the distribution. Thus it is not entirely clear to deduce anything based on just the Percent Salary Hike (d)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-3",
    "href": "content/01_journal/02_automated_ml_1.html#question-3",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,StockOptionLevel) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can confidently say that the density for higher stock options (1 and 2) is higher for those that are staying (Attrition: “No”). Therefore, those that are staying have a higher stock option level (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-4",
    "href": "content/01_journal/02_automated_ml_1.html#question-4",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,EnvironmentSatisfaction) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOne can see that for higher satisfaction levels, significantly more people are staying. This in turn means, that a higher proportion of those that are leaving have a lower satisfaction level, especially for 1 (=“low”). It is also visible on the boxplot, because for “Yes” attrition, the lower 25% quantile extends to 1. So in summary: A higher proportion of those leaving have a low environment satisfaction level (a)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-5",
    "href": "content/01_journal/02_automated_ml_1.html#question-5",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,WorkLifeBalance) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nLooking at the densities again, we can see that the 2’s and 3’s of people that are staying are significantly higher (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-6",
    "href": "content/01_journal/02_automated_ml_1.html#question-6",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,JobInvolvement) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows, that the 3’s and 4’s are much more present for people that are staying (especially visible for 3’s). In turn this means, that hose that are leaving have a lower density of 3’s and 4’s (a)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-7",
    "href": "content/01_journal/02_automated_ml_1.html#question-7",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,OverTime) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can see that for people who are leaving, the relative proportion compared to those not leaving is higher when looking at those working overtime. The absolute numbers for attrition is almost the same for either working overtime or not. But for people who are staying its visibly lower. We look at it from another perspective by computing concrete numbers:\n\nemployee_attrition_tbl %&gt;%\n  count(OverTime, Attrition) %&gt;%\n  count_to_pct(OverTime)\n\n\n\n  \n\n\n\n30% of people who are working overtime are leaving. Only 10% of people who are not working overtime are leaving. Or if you change the perspective one more time:\n\nemployee_attrition_tbl %&gt;%\n  count(Attrition, OverTime) %&gt;%\n  count_to_pct(Attrition)\n\n\n\n  \n\n\n\n54% of people who are leaving are working overtime. Only 23% who are staying are working overtime.\nOverall you can say generally, that the proportion of those leaving that are working overtime are high compared to those that are not leaving (a). (Unless you would say that working overtime shall result in more attrition)"
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-8",
    "href": "content/01_journal/02_automated_ml_1.html#question-8",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,TrainingTimesLastYear) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nIn the plot we can see, that for most higher numbers of training times (2, 3, 5 and 6), the density of those staying is significantly higher. In the boxplot we can also see, that the median for leaving is 2, while it is 3 for those who stay. Therefore we can say that people that leave tend to have less annual trainings (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-9",
    "href": "content/01_journal/02_automated_ml_1.html#question-9",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,YearsAtCompany) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows a higher concentration of people who are leaving that have less years at the company (around 0 to 3). After that, people tend to stay more. The boxplot again confirms this, as the quantiles from the people leaving contain lower values. Therefore, people that leave tend to have less working years at the company (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-10",
    "href": "content/01_journal/02_automated_ml_1.html#question-10",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,YearsSinceLastPromotion) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOnce again the density plot shows, that a slight but a visible amount of people that are leaving have a higher density for fewer years since their last promotion. However, we have seen before that also more people tend to leave that have fewer working years in general, so they were probably never promoted since they just started. There is some sort of correlation, so based on just this plot we cannot make a clear statement (c)."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html",
    "href": "content/01_journal/04_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "1 Challenge 5: Visualizations for Product Backorders Dataset after AutoML\nFor the same reason as in the previous challenge, to prevent issues, the code here is not run directly. The resulting plots are imported. Once again, for the full computation steps, refer to the corresponding .R file performance_measures_CHALLENGE.R located in folder ...\\CHALLENGES.\n\n2 Leaderboard visualization\nA broad overview of the top 15 computed models. The results look already highly accurate, which might be because of a more powerful system on my side. We can see that stacked ensemble algorithms are the best performing ones.\n\nlibrary(h2o)\nlibrary(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(cowplot)\nlibrary(glue)\n\nh2o.init()\n\n# We need the data from the previous challenge, so either run source() or\n# directly run this file if the previous challenge file already ran before\n\n# source(\"CHALLENGES/automated_ml_II_CHALLENGE.R\")\n\n# 1 Leaderboard visualization ----\n\n# Function for plotting hte leaderboard\n\nplot_h2o_leaderboard &lt;- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n  \n  # Setup inputs\n  # adjust input so that all formats are working\n  order_by &lt;- tolower(order_by[[1]])\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as.tibble() %&gt;%\n    select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n    mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n    rownames_to_column(var = \"rowname\") %&gt;%\n    mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as.factor())\n  \n  # Transformation\n  if (order_by == \"auc\") {\n    \n    data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n      slice(1:n_max) %&gt;%\n      mutate(\n        model_id   = as_factor(model_id) %&gt;% reorder(auc),\n        model_type = as.factor(model_type)\n      ) %&gt;%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else if (order_by == \"logloss\") {\n    \n    data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n      slice(1:n_max) %&gt;%\n      mutate(\n        model_id   = as_factor(model_id) %&gt;% reorder(logloss) %&gt;% fct_rev(),\n        model_type = as.factor(model_type)\n      ) %&gt;%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else {\n    # If nothing is supplied\n    stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n  }\n  \n  # Visualization\n  g &lt;- data_transformed_tbl %&gt;%\n    ggplot(aes(value, model_id, color = model_type)) +\n    geom_point(size = size) +\n    facet_wrap(~ key, scales = \"free_x\") +\n    labs(title = \"Leaderboard Metrics\",\n         subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n         y = \"Model Postion, Model ID\", x = \"\")\n  \n  if (include_lbl) g &lt;- g + geom_label(aes(label = round(value, 2), \n                                           hjust = \"inward\"))\n  \n  return(g)\n  \n}\n\nplot_h2o_leaderboard(automl_models_h2o@leaderboard,\"auc\", 15, 3, T)\n\n# Save plot for journal\nggsave(\"CHALLENGES/performance_measures_files/plot1.png\", width = 25, height = 20, units = \"cm\")\n\n\n\n\n\n\n\n\n\n\n3 Tuning a model with grid search\nIf one wants to improve their models, the easiest way is to just allow more computing time. However, it is also possible to fine tune a model by making a “grid” of various parameter combinations that are used to constrain the model during training. In this case, we can use a small amount of so called hyperparameters to squeeze out a bit more performance out of our model.\n\n# 2 Tune a model with grid search ----\n\n# May have to change number whenever models are recomputed\n# Let's refine a GBM model here\ngbm_h2o &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(6) %&gt;% \n  h2o.getModel()\n\n# Checking the model: 3.58% error for training set\ngbm_h2o\n\n# For the test set we get ~8.85% error\nh2o.performance(gbm_h2o, newdata = as.h2o(test_tbl))\n\n# Save for journal\ngbm_h2o %&gt;% \n  h2o.performance(newdata = as.h2o(test_tbl)) %&gt;% \n  h2o.confusionMatrix() %&gt;% \n  as_tibble() %&gt;% \n  saveRDS(\"CHALLENGES/performance_measures_files/gbm_untuned.rds\")\n\ngbm_grid_01 &lt;- h2o.grid(\n  \n  # See help page for available algos\n  algorithm = \"gbm\",\n  \n  # I just use the same as the object\n  grid_id = \"gbm_grid_01\",\n  \n  x = x,\n  y = y,\n  \n  # training and validation frame and crossfold validation\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  \n  hyper_params = list(\n    max_depth = c(9, 10, 11, 12),\n    learn_rate = c(0.1, 0.13, 0.15, 0.17)\n  )\n)\n\nh2o.getGrid(grid_id = \"gbm_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n# Check which model ID was the best\ngbm_grid_01_model_best &lt;- h2o.getModel(\"gbm_grid_01_model_31\")\n\n# Noticeable difference but not too overfit\ngbm_grid_01_model_best %&gt;% h2o.auc(train = T, valid = T, xval = T)\n\n# On the test data, we now get an error of 7.7%, which is a small improvement!\ngbm_grid_01_model_best %&gt;%\n  h2o.performance(newdata = as.h2o(test_tbl))\n\n# Save for journal\ngbm_grid_01_model_best %&gt;% \n  h2o.performance(newdata = as.h2o(test_tbl)) %&gt;% \n  h2o.confusionMatrix() %&gt;% \n  as_tibble() %&gt;% \n  saveRDS(\"CHALLENGES/performance_measures_files/gbm_tuned.rds\")\n\n\ngbm_untuned &lt;- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/performance_measures_files/gbm_untuned.rds\")\ngbm_tuned &lt;- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/performance_measures_files/gbm_tuned.rds\")\n\n# Before tuning:\ngbm_untuned\n\n\n\n  \n\n\n# After tuning:\ngbm_tuned\n\n\n\n  \n\n\n\n\n4 Trade-off between precision and recall with optimal threshold\nThis type of plot shows us the optimal balance of precision and recall defined by a threshold. Generally speaking, we compare false positives (precision) to false negatives (recall) with 1 being the ideal (no incorrect classifications). Since we can not have the best of both worlds, we need to find a good balance, hence the threshold. However this is not the best answer since false negatives are usually more costly for the business case.\n\n# 3 Trade-off between precision and recall with optimal threshold ----\n\n# Lets load 3 different models for future plots\ngbm_h2o &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(6) %&gt;% \n  h2o.getModel()\n\nstacked_ensemble_h2o &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel()\n\nxrt_h2o &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(13) %&gt;% \n  h2o.getModel()\n\n# Save for later plots\ngbm_h2o %&gt;% h2o.saveModel(\"CHALLENGES/performance_measures_files/models/\")\nstacked_ensemble_h2o %&gt;% h2o.saveModel(\"CHALLENGES/performance_measures_files/models/\")\nxrt_h2o %&gt;% h2o.saveModel(\"CHALLENGES/performance_measures_files/models/\")\n\nperformance_h2o &lt;- h2o.performance(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\nperformance_tbl &lt;- performance_h2o %&gt;%\n  h2o.metric() %&gt;%\n  as.tibble() \n\n# Save this theme for later plots\ntheme_new &lt;- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n) \n\nperformance_tbl %&gt;%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n\n# Save plot for journal\nggsave(\"CHALLENGES/performance_measures_files/plot2.png\", width = 25, height = 15, units = \"cm\")\n\n\n\n\n\n\n\n\n\n\n5 ROC Plot\nThe ROC curve puts true positives against false positives, which can give us a good first impression about the performance of the model.\n\n# 4 ROC Plot ----\n\npath &lt;- \"CHALLENGES/performance_measures_files/models/GBM_4_AutoML_3_20240616_180904\"\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n  \n  model_h2o &lt;- h2o.loadModel(path)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n  \n  perf_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() %&gt;%\n    mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n    select(tpr, fpr, auc)\n  \n}\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"CHALLENGES/performance_measures_files/models/\") %&gt;%\n  select(path) %&gt;%\n  mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n  unnest(cols = metrics)\n\nmodel_metrics_tbl %&gt;%\n  mutate(\n    # Extract the model names\n    path = str_split(path, pattern = \"/\", simplify = T)[,4] %&gt;% as_factor(),\n    auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  \n  # just for demonstration purposes\n  geom_abline(color = \"red\", linetype = \"dotted\") +\n  \n  theme_new +\n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"ROC Plot\",\n    subtitle = \"Performance of 3 Top Performing Models for each Algorithm\"\n  )\n\n# Save plot for journal\nggsave(\"CHALLENGES/performance_measures_files/plot3.png\", width = 25, height = 18, units = \"cm\")\n\n\n\n\n\n\n\n\n\n\n6 Precision vs. Recall Plot\nTo visualize the tradeoff between precision and recall, this plot shows how increasing one metric influences the other. Again, it’s up to the user to make the appropriate decision.\n\n# 5 Precision vs. Recall Plot ----\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n  \n  model_h2o &lt;- h2o.loadModel(path)\n  perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n  \n  perf_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() %&gt;%\n    mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n    select(tpr, fpr, auc, precision, recall)\n  \n}\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"CHALLENGES/performance_measures_files/models/\") %&gt;%\n  select(path) %&gt;%\n  mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n  unnest(cols = metrics)\n\nmodel_metrics_tbl %&gt;%\n  mutate(\n    path = str_split(path, pattern = \"/\", simplify = T)[,4] %&gt;% as_factor(),\n    auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n  ) %&gt;%\n  ggplot(aes(recall, precision, color = path, linetype = auc)) +\n  geom_line(size = 1) +\n  theme_new + \n  theme(\n    legend.direction = \"vertical\",\n  ) +\n  labs(\n    title = \"Precision vs Recall Plot\",\n    subtitle = \"Performance of 3 Top Performing Models for each Algorithm\"\n  )\n\n# Save plot for journal\nggsave(\"CHALLENGES/performance_measures_files/plot4.png\", width = 25, height = 18, units = \"cm\")\n\n\n\n\n\n\n\n\n\n\n7 Gain Plot\nThe gain helps us to understand the overall benefit of using models over random choices when making predictions. Assume we have computed a decent model and we determined for a set of values their probabilities (in this case, whether a product will be on backorder or not). Then for the highest probability groups (whatever size they may be) we gain the ability to correctly predict the outcome using our model.\n\n# 6 Gain Plot ----\n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n  h2o.gainsLift() %&gt;%\n  as.tibble()\n\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"lift\")) %&gt;%\n  mutate(baseline = cumulative_data_fraction) %&gt;%\n  rename(gain     = cumulative_capture_rate) %&gt;%\n  # prepare the data for the plotting (for the color and group aesthetics)\n  pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Gain Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Gain\"\n  ) +\n  theme_new\n\n# Save plot for journal\nggsave(\"CHALLENGES/performance_measures_files/plot5.png\", width = 25, height = 20, units = \"cm\")\n\n\n\n\n\n\n\n\n\n\n8 Lift Plot\nClosely related to the gain, the lift tells us how many times better our model is over randomly predicting the outcome. This metric is given by the respective gain divided by the expectation.\n\n# 7 Lift Plot ----\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n  select(-contains(\"capture\")) %&gt;%\n  mutate(baseline = 1) %&gt;%\n  rename(lift = cumulative_lift) %&gt;%\n  pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n  geom_line(size = 1.5) +\n  labs(\n    title = \"Lift Chart\",\n    x = \"Cumulative Data Fraction\",\n    y = \"Lift\"\n  ) +\n  theme_new\n\n# Save plot for journal\nggsave(\"CHALLENGES/performance_measures_files/plot6.png\", width = 25, height = 20, units = \"cm\")\n\n\n\n\n\n\n\n\n\n\n9 Dashboard with cowplot\nThe cowplot package can help us put all the above plots into a bigger summed up picture. Having all different aspects and plots of models shown at once, it is easier to come to a conclusion which model shall be finally used for the specific business case.\n\n# 8 Dashboard with cowplot ----\n\n# Calculate and arrange all previous plots in one big plot\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n  \n  # Inputs\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(1:max_models)\n  \n  newdata_tbl &lt;- newdata %&gt;%\n    as_tibble()\n  \n  # Selecting the first, if nothing is provided\n  order_by      &lt;- tolower(order_by[[1]]) \n  \n  # Convert string stored in a variable to column name (symbol)\n  order_by_expr &lt;- rlang::sym(order_by)\n  \n  # Turn of the progress bars ( opposite h2o.show_progress())\n  h2o.no_progress()\n  \n  # 1. Model metrics\n  \n  get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n    \n    perf_h2o %&gt;%\n      h2o.metric() %&gt;%\n      as.tibble() %&gt;%\n      select(threshold, tpr, fpr, precision, recall)\n    \n  }\n  \n  model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        # programmatically reorder factors depending on order_by\n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc      = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss  = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    )\n  \n  \n  # 1A. ROC Plot\n  \n  p1 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n    theme(legend.direction = \"vertical\") \n  \n  \n  # 1B. Precision vs Recall\n  \n  p2 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n    theme(legend.position = \"none\") \n  \n  \n  # 2. Gain / Lift\n  \n  get_gain_lift &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n      h2o.gainsLift() %&gt;%\n      as.tibble() %&gt;%\n      select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n    \n  }\n  \n  gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc  = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    ) %&gt;%\n    rename(\n      gain = cumulative_capture_rate,\n      lift = cumulative_lift\n    ) \n  \n  # 2A. Gain Plot\n  \n  p3 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, gain, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size,) +\n    geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Gain\",\n         x = \"Cumulative Data Fraction\", y = \"Gain\") +\n    theme(legend.position = \"none\")\n  \n  # 2B. Lift Plot\n  \n  p4 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, lift, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Lift\",\n         x = \"Cumulative Data Fraction\", y = \"Lift\") +\n    theme(legend.position = \"none\") \n  \n  \n  # Combine using cowplot\n  \n  # Original code does not plot the legend at all\n  # Need to fix the given code, have to extract legend correctly\n  # First extract all components and then combine them\n  \n  # Extract all legend components\n  legends &lt;- cowplot::get_plot_component(p1, \"guide-box\", return_all = TRUE)\n  \n  # Combine legends if there are multiple\n  p_legend &lt;- cowplot::plot_grid(plotlist = legends, ncol = 1)\n\n  # Remove legend from p1\n  p1 &lt;- p1 + theme(legend.position = \"none\")\n  \n  # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n  p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n  \n  # cowplot::ggdraw() sets up a drawing layer\n  p_title &lt;- ggdraw() + \n    \n    # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n    draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n               color = \"#2C3E50\")\n  \n  p_subtitle &lt;- ggdraw() + \n    draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n               color = \"#2C3E50\")\n  \n  # Combine everything\n  ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n                   \n                   # Adjust the relative spacing, so that the legends always fits\n                   ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n  \n  h2o.show_progress()\n  \n  return(ret)\n  \n}\n\nautoml_models_h2o@leaderboard %&gt;%\n  plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                       size = 0.5, max_models = 4)\n\n# Save plot for journal\nggsave(\"CHALLENGES/performance_measures_files/plot7.png\", width = 25, height = 25, units = \"cm\")"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  }
]