[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/04_performance_measures.html",
    "href": "content/01_journal/04_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html",
    "href": "content/01_journal/02_automated_ml_1.html",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n# Load Data data definitions\n\npath_data_definitions &lt;- \"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\nemployee_attrition_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n# Step 1: Data Summarization -----\n\n# skim(employee_attrition_tbl)\n# We had a look at this before\n\n# Step 2: Data Visualization ----\n\n# Helper function\ncount_to_pct &lt;- function(data, ..., col = n) {\n  \n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  \n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  \n  return(ret)\n  \n}\n\n# Plot function\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,MonthlyIncome) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWe can see a strong peak for “Yes” at lower monthly incomes. Therefore, those that are leaving have a lower monthly income (c).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,PercentSalaryHike) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe Boxplot shows very similar median values of the salary hike. The density plot shows us a mostly overlapping behavior with minor differences in the distribution. Thus it is not entirely clear to deduce anything based on just the Percent Salary Hike (d).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,StockOptionLevel) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can confidently say that the density for higher stock options (1 and 2) is higher for those that are staying (Attrition: “No”). Therefore, those that are staying have a higher stock option level (b).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,EnvironmentSatisfaction) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOne can see that for higher satisfaction levels, significantly more people are staying. This in turn means, that a higher proportion of those that are leaving have a lower satisfaction level, especially for 1 (=“low”). It is also visible on the boxplot, because for “Yes” attrition, the lower 25% quantile extends to 1. So in summary: A higher proportion of those leaving have a low environment satisfaction level (a).\n\n\nemployee_attrition_tbl %&gt;% \n  select(Attrition,WorkLifeBalance) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nLooking at the densities again, we can see that the 2’s and 3’s of people that are staying are significantly higher (b).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,JobInvolvement) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows, that the 3’s and 4’s are much more present for people that are staying (especially visible for 3’s). In turn this means, that hose that are leaving have a lower density of 3’s and 4’s (a).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,OverTime) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can see that for people who are leaving, the relative proportion compared to those not leaving is higher when looking at those working overtime. The absolute numbers for attrition is almost the same for either working overtime or not. But for people who are staying its visibly lower. We look at it from another perspective by computing concrete numbers:\n\nemployee_attrition_tbl %&gt;%\n  count(OverTime, Attrition) %&gt;%\n  count_to_pct(OverTime)\n\n\n\n  \n\n\n\n30% of people who are working overtime are leaving. Only 10% of people who are not working overtime are leaving. Or if you change the perspective one more time:\n\nemployee_attrition_tbl %&gt;%\n  count(Attrition, OverTime) %&gt;%\n  count_to_pct(Attrition)\n\n\n\n  \n\n\n\n54% of people who are leaving are working overtime. Only 23% who are staying are working overtime.\nOverall you can say generally, that the proportion of those leaving that are working overtime are high compared to those that are not leaving (a). (Unless you would say that working overtime shall result in more attrition)\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,TrainingTimesLastYear) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nIn the plot we can see, that for most higher numbers of training times (2, 3, 5 and 6), the density of those staying is significantly higher. In the boxplot we can also see, that the median for leaving is 2, while it is 3 for those who stay. Therefore we can say that people that leave tend to have less annual trainings (b).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,YearsAtCompany) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows a higher concentration of people who are leaving that have less years at the company (around 0 to 3). After that, people tend to stay more. The boxplot again confirms this, as the quantiles from the people leaving contain lower values. Therefore, people that leave tend to have less working years at the company (b).\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,YearsSinceLastPromotion) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOnce again the density plot shows, that a slight but a visible amount of people that are leaving have a higher density for fewer years since their last promotion. However, we have seen before that also more people tend to leave that have fewer working years in general, so they were probably never promoted since they just started. There is some sort of correlation, so based on just this plot we cannot make a clear statement (c)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#prepare-data-and-functions",
    "href": "content/01_journal/02_automated_ml_1.html#prepare-data-and-functions",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n# Load Data data definitions\n\npath_data_definitions &lt;- \"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\nemployee_attrition_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n# Step 1: Data Summarization -----\n\n# skim(employee_attrition_tbl)\n# We had a look at this before\n\n# Step 2: Data Visualization ----\n\n# Helper function\ncount_to_pct &lt;- function(data, ..., col = n) {\n  \n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  \n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  \n  return(ret)\n  \n}\n\n# Plot function\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}"
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-1",
    "href": "content/01_journal/02_automated_ml_1.html#question-1",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,MonthlyIncome) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWe can see a strong peak for “Yes” at lower monthly incomes. Therefore, those that are leaving have a lower monthly income (c)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-2",
    "href": "content/01_journal/02_automated_ml_1.html#question-2",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,PercentSalaryHike) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe Boxplot shows very similar median values of the salary hike. The density plot shows us a mostly overlapping behavior with minor differences in the distribution. Thus it is not entirely clear to deduce anything based on just the Percent Salary Hike (d)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-3",
    "href": "content/01_journal/02_automated_ml_1.html#question-3",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,StockOptionLevel) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can confidently say that the density for higher stock options (1 and 2) is higher for those that are staying (Attrition: “No”). Therefore, those that are staying have a higher stock option level (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-4",
    "href": "content/01_journal/02_automated_ml_1.html#question-4",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,EnvironmentSatisfaction) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOne can see that for higher satisfaction levels, significantly more people are staying. This in turn means, that a higher proportion of those that are leaving have a lower satisfaction level, especially for 1 (=“low”). It is also visible on the boxplot, because for “Yes” attrition, the lower 25% quantile extends to 1. So in summary: A higher proportion of those leaving have a low environment satisfaction level (a)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-5",
    "href": "content/01_journal/02_automated_ml_1.html#question-5",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;% \n  select(Attrition,WorkLifeBalance) %&gt;% \n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nLooking at the densities again, we can see that the 2’s and 3’s of people that are staying are significantly higher (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-6",
    "href": "content/01_journal/02_automated_ml_1.html#question-6",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,JobInvolvement) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows, that the 3’s and 4’s are much more present for people that are staying (especially visible for 3’s). In turn this means, that hose that are leaving have a lower density of 3’s and 4’s (a)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-7",
    "href": "content/01_journal/02_automated_ml_1.html#question-7",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,OverTime) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nHere we can see that for people who are leaving, the relative proportion compared to those not leaving is higher when looking at those working overtime. The absolute numbers for attrition is almost the same for either working overtime or not. But for people who are staying its visibly lower. We look at it from another perspective by computing concrete numbers:\n\nemployee_attrition_tbl %&gt;%\n  count(OverTime, Attrition) %&gt;%\n  count_to_pct(OverTime)\n\n\n\n  \n\n\n\n30% of people who are working overtime are leaving. Only 10% of people who are not working overtime are leaving. Or if you change the perspective one more time:\n\nemployee_attrition_tbl %&gt;%\n  count(Attrition, OverTime) %&gt;%\n  count_to_pct(Attrition)\n\n\n\n  \n\n\n\n54% of people who are leaving are working overtime. Only 23% who are staying are working overtime.\nOverall you can say generally, that the proportion of those leaving that are working overtime are high compared to those that are not leaving (a). (Unless you would say that working overtime shall result in more attrition)"
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-8",
    "href": "content/01_journal/02_automated_ml_1.html#question-8",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,TrainingTimesLastYear) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nIn the plot we can see, that for most higher numbers of training times (2, 3, 5 and 6), the density of those staying is significantly higher. In the boxplot we can also see, that the median for leaving is 2, while it is 3 for those who stay. Therefore we can say that people that leave tend to have less annual trainings (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-9",
    "href": "content/01_journal/02_automated_ml_1.html#question-9",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,YearsAtCompany) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nThe density plot shows a higher concentration of people who are leaving that have less years at the company (around 0 to 3). After that, people tend to stay more. The boxplot again confirms this, as the quantiles from the people leaving contain lower values. Therefore, people that leave tend to have less working years at the company (b)."
  },
  {
    "objectID": "content/01_journal/02_automated_ml_1.html#question-10",
    "href": "content/01_journal/02_automated_ml_1.html#question-10",
    "title": "Automated Machine Learning with H2O (I)",
    "section": "",
    "text": "employee_attrition_tbl %&gt;%\n  select(Attrition,YearsSinceLastPromotion) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nOnce again the density plot shows, that a slight but a visible amount of people that are leaving have a higher density for fewer years since their last promotion. However, we have seen before that also more people tend to leave that have fewer working years in general, so they were probably never promoted since they just started. There is some sort of correlation, so based on just this plot we cannot make a clear statement (c)."
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html",
    "href": "CHALLENGES/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n  select(symbol, date, adjusted) %&gt;% \n  filter(year(date) &gt;= 2018) %&gt;%\n  group_by(symbol) %&gt;% \n  mutate(lag_adjusted = lag(adjusted)) %&gt;% \n  filter(!is.na(lag_adjusted)) %&gt;% \n  mutate(pct_return = (adjusted - lag_adjusted) / lag_adjusted) %&gt;% \n  select(symbol, date, pct_return) %&gt;% \n  ungroup()\n  \n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n  pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n  select(-symbol) %&gt;% \n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nkmeans_obj %&gt;% glance()\n\n# A tibble: 1 × 4\n  totss tot.withinss betweenss  iter\n  &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n1  33.6         29.2      4.40     3"
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;% \n  mutate(k_means = map(centers, kmeans_mapper)) %&gt;% \n  mutate(glance = map(k_means,glance))\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %&gt;% \n  unnest(glance) %&gt;% \n  select(centers, tot.withinss) %&gt;% \n  \n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#4848cf\", size = 2) +\n  geom_line(color = \"#4848cf\") +\n  \n  labs(\n    title = \"Scree Plot\",\n    subtitle = \"A bend in the graph hints towards diminishing returns for higher number of clusters\"\n    )\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;% \n  select(-symbol) %&gt;% \n  umap()\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;% \n  as_tibble() %&gt;% \n  bind_cols(stock_date_matrix_tbl %&gt;% select(symbol))\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;% \n  ggplot(aes(V1,V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"Umap Projection\")\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "CHALLENGES/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "CHALLENGES/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/unsupervised/umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;% \n  pull(k_means) %&gt;% \n  pluck(10)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;% \n  augment(stock_date_matrix_tbl) %&gt;% \n  select(symbol, .cluster) %&gt;% \n  left_join(umap_results_tbl, by = \"symbol\") %&gt;% \n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;% \n  ggplot(aes(V1,V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = rainbow(10)) +\n  theme_dark()\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/01_supervised_ml_reg2.html",
    "href": "content/01_journal/01_supervised_ml_reg2.html",
    "title": "Supervised ML - Regression (II)",
    "section": "",
    "text": "1 Challenge 2 - Prepare data with “recipe” package\n\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\nlibrary(workflows)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# 1.0 Build a model (GLM) and load Data ----\n\nmodel_glm &lt;- linear_reg() %&gt;% \n  set_engine(\"glm\")\n\nbike_features_tbl &lt;- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/raw_data/bike_features_tbl.rds\")\n\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  \n  select(model:url, `Rear Derailleur`, `Shift Lever`) %&gt;% \n  mutate(id = row_number()) %&gt;% \n  select(id, everything(), -url)\n\n# Split the data first\n\nset.seed(seed = 1112)\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\n\n# Check if testing contains all category_2 values\n# split_obj %&gt;% training() %&gt;% distinct(category_2)\n# split_obj %&gt;% testing() %&gt;% distinct(category_2)\n\n# Assign training and test data\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\n\n# We have to remove spaces and dashes from the column names\ntrain_tbl &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n# 2.0 Create features with the recipes package ----\n\nrecipe_obj &lt;- recipe(price ~ ., data = train_tbl) %&gt;%\n  step_rm(c(model:weight),category_1,c(category_3:gender)) %&gt;%\n  update_role(id, new_role = \"ID\") %&gt;% \n  step_dummy(all_nominal(), - all_outcomes(), one_hot = TRUE) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  # Use median to guess missing values\n  step_impute_median(all_predictors())\n\n# train_transformed_tbl &lt;- bake(recipe_obj, new_data = train_tbl)\n# test_transformed_tbl  &lt;- bake(recipe_obj, new_data = test_tbl)\n\n# 3.0 Bundle model and recipe with the workflow package\n\n# Trying to use prep() or bake() and then bundle it into a workflow\n# gives us the error:\n\n# Error in `add_recipe()`:\n# !Can't add a trained recipe to a workflow.\n\n# One cannot use prep() and bake() if it is to be bundled into a workflow\n# therefore we omit those steps from above and use it \"unprepped\"\n\nbikes_wflow &lt;-\n  workflow() %&gt;% \n  add_model(model_glm) %&gt;% \n  add_recipe(recipe_obj)\n\n# 4.0 Evaluate model with the yardstick package\n\n# Fit the data using workflow\nbikes_fit &lt;- \n  bikes_wflow %&gt;% \n  fit(data = train_tbl)\n\ncalc_metrics &lt;- function(model, new_data = test_tbl) {\n  \n  model %&gt;%\n    predict(new_data = new_data) %&gt;%\n    \n    bind_cols(new_data %&gt;% select(price)) %&gt;%\n    \n    yardstick::metrics(truth = price, estimate = .pred_res)\n  \n}\n\n# Evaluate\nbikes_fit %&gt;% calc_metrics(new_data = test_tbl)\n\n\n\n  \n\n\n\n\n2 Some Remarks\nUsing all_nominal() creates a lot more columns for every specific type as opposed to the advanced string manipulation done for rear derailleurs and shift levers in the business case (which grouped similar names). Therefore, unknown values can appear during predictions, because they only appeared in the training data, and not in the testing data. Thus, step_dummy() could not create variables for the unknown testing data set.\nAlthough step_impute_median() makes predicting with missing values possible, the result is hardly accurate. This can be seen by large errors for certain data points.\n\nbikes_fit %&gt;% predict(new_data = test_tbl) %&gt;% \n  bind_cols(test_tbl %&gt;% select(price))"
  },
  {
    "objectID": "content/01_journal/03_automated_ml_2.html",
    "href": "content/01_journal/03_automated_ml_2.html",
    "title": "Automated Machine Learning with H2O (II)",
    "section": "",
    "text": "The journal qmd file has issues with running h2o in its entirety. Therefore the results are imported and shown here. For the full computation steps, refer to the corresponding .R file automated_ml_II_CHALLENGE.R located in folder ...\\CHALLENGES.\n\n# H2O modeling\nlibrary(h2o)\nlibrary(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\n\nh2o.init()\n\n# 1 Load and split data set ----\n\nproduct_backorders_tbl &lt;- read_csv(\"~/GitHub/ss24-bdml-Adrian-0402/source_data/automated/product_backorders.csv\")\n\n# Predictors info from given paper\n# – x1: Current inventory level of component;\n# – x2: Registered transit time;\n# – x3: In transit quantity;\n# – x4,5,6: Forecast sales for the next 3, 6 and 9 months;\n# – x7,8,9,10: Sales quantity for the prior 1, 3, 6, 9 months;\n# – x11: Minimum recommended amount in stock;\n# – x12: Parts overdue from source;\n# – x13,14: Source performance in last 6 and 12 months;\n# – x15: Amount of stock orders overdue;\n# – x16−21: General risk flags;\n# – y: Product went on backorder.\n\n# Remove \"sku\", because its unique for every product\nproduct_backorders_readable_tbl &lt;- product_backorders_tbl %&gt;% \n  select(-sku) %&gt;% \n  mutate(across(where(is.character), as.factor))\n\nset.seed(seed = 42)\nsplit_obj                       &lt;- rsample::initial_split(product_backorders_readable_tbl, prop = 0.85)\ntrain_readable_tbl              &lt;- training(split_obj)\ntest_readable_tbl               &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 42)\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n# 2 Set response and predictors ----\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n# 3 Run AutoML ----\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 60,\n  nfolds            = 5 \n)\n\n# 4 View leaderboard ----\n\n# Check results\nautoml_models_h2o@leaderboard\n\nautoml_models_h2o@leaderboard %&gt;% as_tibble() %&gt;% \n  saveRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/leaderboard_tbl.rds\")\n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\nleader_model_h2o &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel()\n\n# 5 Predict with leader model ----\n\npredictions_tbl &lt;- h2o.predict(leader_model_h2o, newdata = test_h2o) %&gt;% \n  as_tibble()\n\npredictions_tbl %&gt;%  \n  saveRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/predictions_tbl.rds\")\n\n# Prediction results\npredictions_tbl\n\n# 6 Save model ----\n\n# Only to be run once, same model won't be overwritten if it\n# already exists.\n\nleader_model_h2o %&gt;% \n  h2o.saveModel(path = \"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/\")\n\nThe leaderboard and predictions are imported here for simplicity:\n\nlibrary(tidyverse)\n\nleaderboard_tbl &lt;- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/leaderboard_tbl.rds\")\n\nleaderboard_tbl\n\n\n\n  \n\n\npredictions_tbl &lt;- readRDS(\"~/GitHub/ss24-bdml-Adrian-0402/CHALLENGES/predictions_tbl.rds\")\n\npredictions_tbl"
  },
  {
    "objectID": "content/01_journal/05_blackbox_lime.html",
    "href": "content/01_journal/05_blackbox_lime.html",
    "title": "05 Explaining Black-Box Models With LIME",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  }
]